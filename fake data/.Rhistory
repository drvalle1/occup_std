m.betas1.true=m.betas1=runif(nparam.occ1,min=-1,max=1)
tau2.betas1.true=tau2.betas1=runif(nparam.occ1,min=0,max=1)
betas1=matrix(NA,nparam.occ1,nspp)
for (i in 1:nparam.occ1){
betas1[i,]=rnorm(nspp,mean=m.betas1.true[i],sd=sqrt(tau2.betas1[i]))
}
betas1.true=betas1
#get covariates for occupancy
xmat.occ=matrix(rnorm(nloc*(nparam.occ2+nparam.occ1-1)),nloc,nparam.occ1-1+nparam.occ2)
xmat.occ=cbind(1,xmat.occ)
#generate occupancy status
betas.true=betas=rbind(betas1,betas2)
media=xmat.occ%*%betas
zstar.true=zstar=matrix(rnorm(nloc*nspp,mean=media,sd=1),nloc,nspp)
z.true=z=matrix(ifelse(zstar>0,1,0),nloc,nspp)
#---------------------------------
#---------------------------------
#DETECTION
tau2.gamma.true=tau2.gamma=runif(nparam.det,min=0,max=0.3)
m.gamma.true=m.gamma=runif(nparam.det,min=-1,max=1)
gammas=matrix(NA,nparam.det,nspp)
for (i in 1:nparam.det){
gammas[i,]=rnorm(nspp,mean=m.gamma[i],sd=sqrt(tau2.gamma[i]))
}
gammas.true=gammas
#get covariates for detection
xmat.det=array(NA,dim=c(nloc,nparam.det,nrep))
for (i in 1:nrep){
tmp=rnorm(nloc*(nparam.det-1))
tmp1=cbind(1,matrix(tmp,nloc,nparam.det-1))
xmat.det[,,i]=tmp1
}
#generate observations
media=ystar=y=array(NA,dim=c(nloc,nspp,nrep))
for (i in 1:nrep){
media[,,i]=xmat.det[,,i]%*%gammas
ystar[,,i]=rnorm(nloc*nspp,mean=media[,,i],sd=1)
#site has to be occupied and species has to have been detected
y[,,i]=ifelse(ystar[,,i]>0 & z.true==1,1,0)
}
ystar.true=ystar
#export data
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
y1=matrix(y,nloc*nspp*nrep,1)
write.csv(y1,'fake data y.csv',row.names=F)
write.csv(xmat.occ,'fake data xmat occ.csv',row.names=F)
xmat.det1=matrix(xmat.det,nloc*nparam.det*nrep,1)
write.csv(xmat.det1,'fake data xmat det.csv',row.names=F)
rm(list=ls())
library('mvtnorm')
set.seed(35)
#basic settings
nrep=5
#get functions
setwd('U:\\GIT_models\\occup_montalvo')
source('aux occup montalvo.R')
source('gibbs_occup_montalvo.R')
#get design matrix for occupancy
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
xmat.occ=data.matrix(read.csv('fake data xmat occ.csv',as.is=T))
xtx.occ=t(xmat.occ)%*%xmat.occ
nparam.occ=ncol(xmat.occ)
nloc=nrow(xmat.occ)
#get data
tmp=read.csv('fake data y.csv',as.is=T)
nspp=nrow(tmp)/(nrep*nloc); nspp
y=array(tmp$V1,dim=c(nloc,nspp,nrep))
#design matrix for detection
tmp=read.csv('fake data xmat det.csv',as.is=T)
nparam.det=nrow(tmp)/(nloc*nrep); nparam.det
xmat.det=array(tmp$V1,dim=c(nloc,nparam.det,nrep))
#basic settings
ngr=10
ngibbs=1000
nburn=ngibbs/2
tau2.betas2=0.5
#priors
tau2.a=0.1; tau2.b=0.1
gamma1=0.01
ind.reff=1:2
ind.gr.reff=3:ncol(xmat.occ)
#run gibbs
mod1=gibbs_occup(y=y,xmat.occ=xmat.occ,xmat.det=xmat.det,ngr=ngr,
tau2.a=tau2.a,tau2.b=tau2.b,gamma1=gamma1,
ind.reff=ind.reff,ind.gr.reff=ind.gr.reff,
ngibbs=ngibbs,nburn=nburn,tau2.betas2=tau2.betas2)
set.seed(32)
#basic settings
nloc=1000
nrep=5
nspp=150
ngr=5
nparam.det=3
#latent group membership
w.true=w=sample(1:ngr,size=nspp,replace=T)
#OCCUPANCY
#parameters
seq1=seq(from=-2,to=2,by=1)
nparam.occ2=4
nparam.occ1=2
m.betas2.true=m.betas2=matrix(sample(seq1,size=nparam.occ2*ngr,replace=T),
nparam.occ2,ngr)
tau2.betas2=0.5 #set by user
#get betas2
betas2=matrix(NA,nparam.occ2,nspp)
for (i in 1:nspp){
mu1=m.betas2[,w[i]]
betas2[,i]=rnorm(nparam.occ2,mean=mu1,sd=sqrt(tau2.betas2))
}
betas2.true=betas2
#visualize betas2
rango=range(betas2)
par(mfrow=c(3,1),mar=rep(1,4))
for (i in 1:ngr) image(betas2[,w==i],zlim=rango)
#get betas1
nparam.occ1=2
m.betas1.true=m.betas1=runif(nparam.occ1,min=-1,max=1)
tau2.betas1.true=tau2.betas1=runif(nparam.occ1,min=0,max=1)
betas1=matrix(NA,nparam.occ1,nspp)
for (i in 1:nparam.occ1){
betas1[i,]=rnorm(nspp,mean=m.betas1.true[i],sd=sqrt(tau2.betas1[i]))
}
betas1.true=betas1
#get covariates for occupancy
xmat.occ=matrix(rnorm(nloc*(nparam.occ2+nparam.occ1-1)),nloc,nparam.occ1-1+nparam.occ2)
xmat.occ=cbind(1,xmat.occ)
#generate occupancy status
betas.true=betas=rbind(betas1,betas2)
media=xmat.occ%*%betas
zstar.true=zstar=matrix(rnorm(nloc*nspp,mean=media,sd=1),nloc,nspp)
z.true=z=matrix(ifelse(zstar>0,1,0),nloc,nspp)
#---------------------------------
#---------------------------------
#DETECTION
tau2.gamma.true=tau2.gamma=runif(nparam.det,min=0,max=0.3)
m.gamma.true=m.gamma=runif(nparam.det,min=-1,max=1)
gammas=matrix(NA,nparam.det,nspp)
for (i in 1:nparam.det){
gammas[i,]=rnorm(nspp,mean=m.gamma[i],sd=sqrt(tau2.gamma[i]))
}
gammas.true=gammas
#get covariates for detection
xmat.det=array(NA,dim=c(nloc,nparam.det,nrep))
for (i in 1:nrep){
tmp=rnorm(nloc*(nparam.det-1))
tmp1=cbind(1,matrix(tmp,nloc,nparam.det-1))
xmat.det[,,i]=tmp1
}
#generate observations
media=ystar=y=array(NA,dim=c(nloc,nspp,nrep))
for (i in 1:nrep){
media[,,i]=xmat.det[,,i]%*%gammas
ystar[,,i]=rnorm(nloc*nspp,mean=media[,,i],sd=1)
#site has to be occupied and species has to have been detected
y[,,i]=ifelse(ystar[,,i]>0 & z.true==1,1,0)
}
ystar.true=ystar
compare1=function(estim,true){
rango=range(c(true,estim))
plot(true,estim,ylim=rango,xlim=rango)
lines(rango,rango,col='red',lwd=2)
}
plot(mod1$llk,type='l')
seq1=500:ngibbs
plot(mod1$llk[seq1],type='l')
plot(mod1$theta[ngibbs,],type='h')
aux=data.frame(w.true=w.true,w.estim=mod1$w[ngibbs,])
k=table(aux); k
seq1=c(5,2,3,5,4)
k[,seq1]
seq1=c(2,3,5,4,5)
k[,seq1]
seq1=1:5
k[,seq1]
seq1=c(2,3,5,4,1)
k[,seq1]
betas.estim=matrix(mod1$betas[ngibbs,],nparam.occ,nspp)
compare1(estim=betas.estim,true=betas.true)
ngr=10
m.betas.estim=matrix(mod1$m.betas2[ngibbs,],nparam.occ2,ngr)
ind=seq1
compare1(m.betas.estim[,ind],m.betas2.true)
m.betas1.estim=mod1$m.betas1[ngibbs,]
compare1(estim=m.betas1.estim,true=m.betas1.true)
tau2.betas1.estim=mod1$tau2.betas1[ngibbs,]
compare1(estim=tau2.betas1.estim,true=tau2.betas1.true)
gammas.estim=matrix(mod1$gammas[ngibbs,],nparam.det,nspp)
compare1(estim=gammas.estim,true=gammas.true)
#compare m.gammas
m.gammas.estim=mod1$m.gamma[ngibbs,]
compare1(estim=m.gammas.estim,true=m.gamma.true)
tau2.gammas.estim=mod1$tau2.gamma[ngibbs,]
compare1(estim=tau2.gammas.estim,true=tau2.gamma.true)
rm(list=ls())
set.seed(32)
#basic settings
nloc=1000
nrep=5
nspp=150
ngr=5
nparam.det=3
#latent group membership
w.true=w=sample(1:ngr,size=nspp,replace=T)
#OCCUPANCY
#parameters
seq1=seq(from=-2,to=2,by=1)
nparam.occ2=4
nparam.occ1=2
betas2.true=betas2=matrix(sample(seq1,size=nparam.occ2*ngr,replace=T),
nparam.occ2,ngr)
#visualize betas2
rango=range(betas2)
par(mfrow=c(3,1),mar=rep(1,4))
for (i in 1:ngr) image(betas2[,i],zlim=rango)
rm(list=ls())
set.seed(32)
#basic settings
nloc=1000
nrep=5
nspp=150
ngr=5
nparam.det=3
#latent group membership
w.true=w=sample(1:ngr,size=nspp,replace=T)
#OCCUPANCY
#parameters
seq1=seq(from=-2,to=2,by=1)
nparam.occ2=4
nparam.occ1=2
betas2.true=betas2=matrix(sample(seq1,size=nparam.occ2*ngr,replace=T),
nparam.occ2,ngr)
image(betas2,zlim=rango)
image(betas2)
image(betas2)
nparam.occ1=2
m.betas1.true=m.betas1=runif(nparam.occ1,min=-1,max=1)
tau2.betas1.true=tau2.betas1=runif(nparam.occ1,min=0,max=1)
betas1=matrix(NA,nparam.occ1,nspp)
for (i in 1:nparam.occ1){
betas1[i,]=rnorm(nspp,mean=m.betas1.true[i],sd=sqrt(tau2.betas1[i]))
}
betas1.true=betas1
#get covariates for occupancy
xmat.occ=matrix(rnorm(nloc*(nparam.occ2+nparam.occ1-1)),nloc,nparam.occ1-1+nparam.occ2)
xmat.occ=cbind(1,xmat.occ)
dim(betas2)
w
betas.true=betas=rbind(betas1,betas2[,w])
rm(list=ls())
set.seed(32)
#basic settings
nloc=1000
nrep=5
nspp=150
ngr=5
nparam.det=3
#latent group membership
w.true=w=sample(1:ngr,size=nspp,replace=T)
#OCCUPANCY
#parameters
seq1=seq(from=-2,to=2,by=1)
nparam.occ2=4
nparam.occ1=2
betas2.true=betas2=matrix(sample(seq1,size=nparam.occ2*ngr,replace=T),
nparam.occ2,ngr)
image(betas2)
#get betas1
nparam.occ1=2
m.betas1.true=m.betas1=runif(nparam.occ1,min=-1,max=1)
tau2.betas1.true=tau2.betas1=runif(nparam.occ1,min=0,max=1)
betas1=matrix(NA,nparam.occ1,nspp)
for (i in 1:nparam.occ1){
betas1[i,]=rnorm(nspp,mean=m.betas1.true[i],sd=sqrt(tau2.betas1[i]))
}
betas1.true=betas1
#get covariates for occupancy
xmat.occ=matrix(rnorm(nloc*(nparam.occ2+nparam.occ1-1)),nloc,nparam.occ1-1+nparam.occ2)
xmat.occ=cbind(1,xmat.occ)
#generate occupancy status
betas.true=betas=rbind(betas1,betas2[,w])
media=xmat.occ%*%betas
zstar.true=zstar=matrix(rnorm(nloc*nspp,mean=media,sd=1),nloc,nspp)
z.true=z=matrix(ifelse(zstar>0,1,0),nloc,nspp)
#---------------------------------
#---------------------------------
#DETECTION
tau2.gamma.true=tau2.gamma=runif(nparam.det,min=0,max=0.3)
m.gamma.true=m.gamma=runif(nparam.det,min=-1,max=1)
gammas=matrix(NA,nparam.det,nspp)
for (i in 1:nparam.det){
gammas[i,]=rnorm(nspp,mean=m.gamma[i],sd=sqrt(tau2.gamma[i]))
}
gammas.true=gammas
#get covariates for detection
xmat.det=array(NA,dim=c(nloc,nparam.det,nrep))
for (i in 1:nrep){
tmp=rnorm(nloc*(nparam.det-1))
tmp1=cbind(1,matrix(tmp,nloc,nparam.det-1))
xmat.det[,,i]=tmp1
}
#generate observations
media=ystar=y=array(NA,dim=c(nloc,nspp,nrep))
for (i in 1:nrep){
media[,,i]=xmat.det[,,i]%*%gammas
ystar[,,i]=rnorm(nloc*nspp,mean=media[,,i],sd=1)
#site has to be occupied and species has to have been detected
y[,,i]=ifelse(ystar[,,i]>0 & z.true==1,1,0)
}
ystar.true=ystar
#export data
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
y1=matrix(y,nloc*nspp*nrep,1)
write.csv(y1,'fake data y.csv',row.names=F)
write.csv(xmat.occ,'fake data xmat occ.csv',row.names=F)
xmat.det1=matrix(xmat.det,nloc*nparam.det*nrep,1)
write.csv(xmat.det1,'fake data xmat det.csv',row.names=F)
rm(list=ls())
set.seed(32)
#basic settings
nloc=1000
nrep=5
nspp=150
ngr=5
nparam.det=3
#latent group membership
w.true=w=sample(1:ngr,size=nspp,replace=T)
#OCCUPANCY
#parameters
seq1=seq(from=-2,to=2,by=1)
nparam.occ2=4
nparam.occ1=2
betas2.true=betas2=matrix(sample(seq1,size=nparam.occ2*ngr,replace=T),
nparam.occ2,ngr)
image(betas2)
#get betas1
nparam.occ1=2
m.betas1.true=m.betas1=runif(nparam.occ1,min=-1,max=1)
tau2.betas1.true=tau2.betas1=runif(nparam.occ1,min=0,max=1)
betas1=matrix(NA,nparam.occ1,nspp)
for (i in 1:nparam.occ1){
betas1[i,]=rnorm(nspp,mean=m.betas1.true[i],sd=sqrt(tau2.betas1[i]))
}
betas1.true=betas1
#get covariates for occupancy
xmat.occ=matrix(rnorm(nloc*(nparam.occ2+nparam.occ1-1)),nloc,nparam.occ1-1+nparam.occ2)
xmat.occ=cbind(1,xmat.occ)
#generate occupancy status
betas.true=betas=rbind(betas1,betas2[,w])
media=xmat.occ%*%betas
zstar.true=zstar=matrix(rnorm(nloc*nspp,mean=media,sd=1),nloc,nspp)
z.true=z=matrix(ifelse(zstar>0,1,0),nloc,nspp)
#---------------------------------
#---------------------------------
#DETECTION
tau2.gamma.true=tau2.gamma=runif(nparam.det,min=0,max=0.3)
m.gamma.true=m.gamma=runif(nparam.det,min=-1,max=1)
gammas=matrix(NA,nparam.det,nspp)
for (i in 1:nparam.det){
gammas[i,]=rnorm(nspp,mean=m.gamma[i],sd=sqrt(tau2.gamma[i]))
}
gammas.true=gammas
#get covariates for detection
xmat.det=array(NA,dim=c(nloc,nparam.det,nrep))
for (i in 1:nrep){
tmp=rnorm(nloc*(nparam.det-1))
tmp1=cbind(1,matrix(tmp,nloc,nparam.det-1))
xmat.det[,,i]=tmp1
}
#generate observations
media=ystar=y=array(NA,dim=c(nloc,nspp,nrep))
for (i in 1:nrep){
media[,,i]=xmat.det[,,i]%*%gammas
ystar[,,i]=rnorm(nloc*nspp,mean=media[,,i],sd=1)
#site has to be occupied and species has to have been detected
y[,,i]=ifelse(ystar[,,i]>0 & z.true==1,1,0)
}
ystar.true=ystar
#export data
setwd('U:\\GIT_models\\occup_montalvo_SAM\\fake data')
y1=matrix(y,nloc*nspp*nrep,1)
write.csv(y1,'fake data y.csv',row.names=F)
write.csv(xmat.occ,'fake data xmat occ.csv',row.names=F)
xmat.det1=matrix(xmat.det,nloc*nparam.det*nrep,1)
write.csv(xmat.det1,'fake data xmat det.csv',row.names=F)
rm(list=ls())
library('mvtnorm')
set.seed(35)
#basic settings
nrep=5
#get functions
setwd('U:\\GIT_models\\occup_montalvo_SAM')
source('aux occup montalvo.R')
source('gibbs_occup_montalvo.R')
# rm(list=ls())
library('mvtnorm')
set.seed(35)
#basic settings
nrep=5
#get functions
setwd('U:\\GIT_models\\occup_montalvo_SAM')
source('aux occup montalvo.R')
source('gibbs_occup_montalvo.R')
#get design matrix for occupancy
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
xmat.occ=data.matrix(read.csv('fake data xmat occ.csv',as.is=T))
ind.reff=1:2
ind.gr=3:ncol(xmat.occ)
xmat.occ1=xmat.occ[,ind.reff]
xmat.occ2=xmat.occ[,ind.gr]
head(xmat.occ1)
head(xmat.occ2)
rm(list=ls())
library('mvtnorm')
set.seed(35)
#basic settings
nrep=5
#get functions
setwd('U:\\GIT_models\\occup_montalvo_SAM')
source('aux occup montalvo.R')
source('gibbs_occup_montalvo.R')
#get design matrix for occupancy
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
xmat.occ=data.matrix(read.csv('fake data xmat occ.csv',as.is=T))
ind.reff=1:2
ind.gr=3:ncol(xmat.occ)
xmat.occ1=xmat.occ[,ind.reff]
xmat.occ2=xmat.occ[,ind.gr]
nloc=nrow(xmat.occ)
tmp=read.csv('fake data y.csv',as.is=T)
nspp=nrow(tmp)/(nrep*nloc); nspp
y=array(tmp$V1,dim=c(nloc,nspp,nrep))
tmp=read.csv('fake data xmat det.csv',as.is=T)
nparam.det=nrow(tmp)/(nloc*nrep); nparam.det
xmat.det=array(tmp$V1,dim=c(nloc,nparam.det,nrep))
#basic settings
ngr=10
ngibbs=1000
nburn=ngibbs/2
tau2.betas2=0.5
#priors
tau2.a=0.1; tau2.b=0.1
gamma1=0.01
rm(list=ls())
library('mvtnorm')
set.seed(35)
#basic settings
nrep=5
#get functions
setwd('U:\\GIT_models\\occup_montalvo_SAM')
source('aux occup montalvo.R')
source('gibbs_occup_montalvo.R')
#get design matrix for occupancy
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
xmat.occ=data.matrix(read.csv('fake data xmat occ.csv',as.is=T))
ind.reff=1:2
ind.gr=3:ncol(xmat.occ)
xmat.occ1=xmat.occ[,ind.reff]
xmat.occ2=xmat.occ[,ind.gr]
nloc=nrow(xmat.occ)
#get data
tmp=read.csv('fake data y.csv',as.is=T)
nspp=nrow(tmp)/(nrep*nloc); nspp
y=array(tmp$V1,dim=c(nloc,nspp,nrep))
#design matrix for detection
tmp=read.csv('fake data xmat det.csv',as.is=T)
nparam.det=nrow(tmp)/(nloc*nrep); nparam.det
xmat.det=array(tmp$V1,dim=c(nloc,nparam.det,nrep))
#basic settings
ngr=10
ngibbs=1000
nburn=ngibbs/2
#priors
tau2.a=0.1; tau2.b=0.1
gamma1=0.01
#initial values
nspp=ncol(y[,,1])
nloc=nrow(xmat.occ1)
nparam.occ1=ncol(xmat.occ1)
nparam.occ2=ncol(xmat.occ2)
nparam.det=ncol(xmat.det[,,1])
ystar=y
ystar=ifelse(y==1,1,-1)
m.betas1=rep(0,nparam.occ1)
tau2.betas1=rep(1,nparam.occ1)
w=sample(1:ngr,size=nspp,replace=T)
betas1=matrix(0,nparam.occ1,nspp)
betas2=matrix(0,nparam.occ2,ngr)
theta=rep(1/ngr,ngr)
z=apply(y,c(1,2),max)
zstar=matrix(ifelse(z==1,1,-1),nloc,nspp)
m.gamma=rep(0,nparam.det)
tau2.gamma=rep(1,nparam.det)
gammas=matrix(0,nparam.det,nspp)
#MCMC settings
store.betas2=matrix(NA,ngibbs,nparam.occ2*ngr)
store.m.betas1=matrix(NA,ngibbs,nparam.occ1)
store.tau2.betas1=matrix(NA,ngibbs,nparam.occ1)
store.gammas=matrix(NA,ngibbs,nparam.det*nspp)
store.m.gamma=matrix(NA,ngibbs,nparam.det)
store.tau2.gamma=matrix(NA,ngibbs,nparam.det)
store.betas1=matrix(NA,ngibbs,nparam.occ1*nspp)
store.w=matrix(NA,ngibbs,nspp)
store.theta=matrix(NA,ngibbs,ngr)
store.llk=matrix(NA,ngibbs,1)
options(warn=2)
xmat.occ=cbind(xmat.occ1,xmat.occ2)
betas=rbind(betas1,betas2[,w])
z=sample.z(xmat.occ=xmat.occ,betas=betas,nloc=nloc,
nspp=nspp,nrep=nrep,y=y,xmat.det=xmat.det,gammas=gammas)
z
xtx1=t(xmat.occ1)%*%xmat.occ1
xtx2=t(xmat.occ2)%*%xmat.occ2
